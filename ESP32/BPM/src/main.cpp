#include <Arduino.h>
#include <Firebase_ESP_Client.h>
#include <WiFiClientSecure.h>
#include <Wire.h>
#include <WiFi.h>
#include <algorithm>
#include "MAX30105.h"
#include "heartRate.h"
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>

// --- Configuración de la pantalla TFT ---
#define TFT_CS 15
#define TFT_RST 4
#define TFT_DC 2
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

// --- Bitmap ejemplo (puedes cambiarlo por otros) ---
const unsigned char epd_bitmap_1[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
    0xff, 0xf0, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x7f,
    0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x0f, 0xff,
    0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
    0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
    0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff,
    0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// --- Sensor MAX30105 ---
MAX30105 particleSensor;

const byte RATE_SIZE = 5;
byte rates[RATE_SIZE];
byte rateSpot = 0;
long lastBeat = 0;

float beatsPerMinute;
int beatAvg;
int stableBPM = 0;
int previousBPM = 0;
unsigned long lastUpdateTime = 0;
const unsigned long stabilizationInterval = 5000;

const int minValidMeasurements = 3;
int validMeasurements = 0;

bool dedoPresente = false;
const int umbralIR = 60000;
const int tiempoConfirmacionDedo = 2000;
unsigned long tiempoUltimaConfirmacion = 0;
// Nuevas variables que debes agregar globalmente si aún no están:
unsigned long tiempoInicioProcesamiento = 0;
const unsigned long tiempoMaximoProcesamiento = 5000; // 5 segundos
String mensajeAnterior = "";

// --- WiFi ---
const char *WiFi_SSID = "Suazo";
const char *PASSWORD = "suazo0704";

// --- Firebase ---
const char *DB_URL = "https://bpmapp-5dba1-default-rtdb.firebaseio.com";
const char *API_WEB_KEY = "AIzaSyBDt9uqfDIIcJyBcSxVVfhLoQ_o5_RrLZ4";
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
unsigned long sendDataPrevMillis = 0;
bool signupOk = false;
long irValue;
// --- Prototipos ---
void mostrarMensaje(String mensaje);
int calcularPromedioBPM();
void mostrarBPM(int bpm);
void detectarDispositivosI2C();
void resetI2CPins();
void SendDataFB(int BPM);
int StableBPM(long IrValue);
void ConfigFB();
void reconectarWiFi();

void setup()
{
  
  ConfigFB();

  Wire.begin(21, 22);
  detectarDispositivosI2C();

  if (!particleSensor.begin(Wire, 100000))
  {
    Serial.println("MAX30105 no detectado.");
    while (1)
      ;
  }
  else
  {
    Serial.println("MAX30105 detectado correctamente.");
  }

  particleSensor.setup();
  particleSensor.setPulseAmplitudeRed(80);
  particleSensor.setPulseAmplitudeGreen(0);

  // TFT setup
  Serial.println("Iniciando pantalla ST7735...");
  tft.initR(INITR_BLACKTAB);
  tft.fillScreen(ST77XX_BLACK);
}

void loop()
{
  reconectarWiFi();
  irValue = particleSensor.getIR();
  // Serial.print("IR Value: ");
  // Serial.println(irValue);
  int stableBPM = StableBPM(irValue);

  

  

 
}


void ConfigFB(){
  Serial.begin(115200);
  WiFi.begin(WiFi_SSID, PASSWORD);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(1000);
    Serial.println("Conectando a WiFi...");
  }
  Serial.println("\nConexión establecida");
  Serial.println(WiFi.localIP());

  config.api_key = API_WEB_KEY;
  config.database_url = DB_URL;

  if (Firebase.signUp(&config, &auth, "", ""))
  {
    Serial.println("Firebase SignUp OK");
    signupOk = true;
  }
  else
  {
    Serial.println(config.signer.signupError.message.c_str());
  }

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  Serial.println("sistemaConectado");
}

int StableBPM(long irValue) {
  if (irValue >= umbralIR) {
    if (!dedoPresente && (millis() - tiempoUltimaConfirmacion > tiempoConfirmacionDedo)) {
      dedoPresente = true;
      Serial.println("Dedo detectado");
      mostrarMensaje("Procesando...");
      // No necesitamos tiempoInicioProcesamiento aquí
    }
  } else {
    if (dedoPresente) Serial.println("Dedo removido");

    // Reiniciar variables
    dedoPresente = false;
    tiempoUltimaConfirmacion = millis();
    mostrarMensaje("Ubique su dedo");

    stableBPM = -1;
    beatAvg = 0;
    validMeasurements = 0;
    rateSpot = 0;
    for (byte i = 0; i < RATE_SIZE; i++) rates[i] = 0;

    return -1;
  }

  if (dedoPresente && checkForBeat(irValue)) {
    long delta = millis() - lastBeat;
    lastBeat = millis();
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute >= 45 && beatsPerMinute <= 190) {
      rates[rateSpot++] = (byte)beatsPerMinute;
      rateSpot %= RATE_SIZE;

      validMeasurements++;

      if (validMeasurements >= minValidMeasurements) {
        beatAvg = calcularPromedioBPM();

        unsigned long currentTime = millis();
        if (currentTime - lastUpdateTime >= stabilizationInterval) {
          stableBPM = beatAvg;

          if (abs(stableBPM - previousBPM) >= 1) {
            previousBPM = stableBPM;
            lastUpdateTime = currentTime;
            mostrarBPM(stableBPM);
          }
          
          if(stableBPM != -1) SendDataFB(stableBPM);
          return stableBPM;
        }
      }
    }
    
  }

  return -1;  // Aún no hay BPM confiable
}




void SendDataFB(int BPM){
   if (Firebase.ready() && signupOk && (millis() - sendDataPrevMillis > 5000 || sendDataPrevMillis == 0))
  {
    sendDataPrevMillis = millis();
    if (Firebase.RTDB.setInt(&fbdo, "BPM", BPM))
    {
      Serial.println("Datos enviados a Firebase.");
    }
    else
    {
      Serial.println(fbdo.errorReason());
    }
  }
  
}


void mostrarMensaje(String mensaje) {
  if (mensaje != mensajeAnterior) {
    mensajeAnterior = mensaje;

    Serial.println(mensaje);
    tft.fillScreen(ST77XX_BLACK);
    tft.setTextColor(ST77XX_WHITE);
    tft.setTextSize(2);  // Tamaño más legible
    tft.setCursor(10, 60);
    tft.print(mensaje);
  }
}


void mostrarBPM(int bpm)
{
  Serial.print("BPM estabilizado: ");
  Serial.println(bpm);

  tft.fillScreen(ST77XX_BLACK);
  tft.drawBitmap(10, 10, epd_bitmap_1, 96, 77, ST77XX_WHITE);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(2);
  tft.setCursor(20, 100);
  tft.print("BPM: ");
  tft.println(bpm);
}

int calcularPromedioBPM() {
  int sumaBPM = 0;
  int conteo = 0;

  for (byte i = 0; i < RATE_SIZE; i++) {
    if (rates[i] >= 50 && rates[i] <= 180) {
      sumaBPM += rates[i];
      conteo++;
    }
  }

  if (conteo == 0) return 0;
  return sumaBPM / conteo;
}


void detectarDispositivosI2C()
{
  byte error, direccion;
  int dispositivos = 0;

  Serial.println("Buscando dispositivos I2C...");
  for (direccion = 1; direccion < 127; direccion++)
  {
    Wire.beginTransmission(direccion);
    error = Wire.endTransmission();
    if (error == 0)
    {
      Serial.print("Dispositivo encontrado en 0x");
      Serial.println(direccion, HEX);
      dispositivos++;
    }
  }
  if (dispositivos == 0)
  {
    Serial.println("No se encontraron dispositivos I2C.");
  }
  else
  {
    Serial.println("Escaneo I2C completado.");
  }
}

void resetI2CPins()
{
  pinMode(21, OUTPUT);
  pinMode(22, OUTPUT);
  digitalWrite(21, HIGH);
  digitalWrite(22, HIGH);
  delay(10);
  for (int i = 0; i < 9; i++)
  {
    digitalWrite(22, LOW);
    delay(10);
    digitalWrite(22, HIGH);
    delay(10);
  }
  Wire.begin();
  Serial.println("Bus I2C reiniciado manualmente");
}


void reconectarWiFi() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi desconectado. Intentando reconectar...");
    WiFi.disconnect();
    WiFi.begin(WiFi_SSID, PASSWORD);

    unsigned long tiempoInicio = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - tiempoInicio < 10000) {
      delay(500);
      Serial.print(".");
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nReconexión exitosa.");
      
      // 🔁 Re-inicializar Firebase u otro servicio seguro si es necesario
      // firebaseReconnect();
    } else {
      Serial.println("\nNo se pudo reconectar.");
    }
  }
}




//2105